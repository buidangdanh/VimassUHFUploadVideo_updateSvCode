<Project>

    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <IkvmTargetFramework Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.0'))">NetCore</IkvmTargetFramework>
        <IkvmTargetFramework Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net461'))">NetFramework</IkvmTargetFramework>
        <IkvmTargetFramework Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp3.1'))">NetCore</IkvmTargetFramework>
        <IkvmToolsPath>$([System.IO.Path]::GetFullPath('$(IkvmDir)bin\'))</IkvmToolsPath>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <IkvmStageDir Condition=" '$(IkvmStageDir)' == '' ">$(IntermediateOutputPath)ikvm\stage\1\</IkvmStageDir>
        <IkvmCacheDir Condition=" '$(IkvmCacheDir)' == '' ">$([System.IO.Path]::GetTempPath())ikvm\cache\1\</IkvmCacheDir>
    </PropertyGroup>

    <!-- Gathers those references which are either related to the Framework itself, or IKVM. -->
    <Target Name="GetIkvmCompileReferences" DependsOnTargets="ResolveProjectReferences">
        <IkvmGetReferenceAssemblies ToolsPath="$(IkvmToolsPath)ikvmc" TargetFramework="$(IkvmTargetFramework)">
            <Output TaskParameter="ResolvedFrameworkReferences" ItemName="IkvmFrameworkReference" />
        </IkvmGetReferenceAssemblies>

        <!-- Locate runtime assemblies. -->
        <ItemGroup>
            <IkvmBaseReference Include="@(Reference)" Condition=" '%(Filename)%(Extension)' == 'IKVM.Java.dll' " />
            <IkvmRuntimeAssembly Include="@(Reference)" Condition=" '%(Filename)%(Extension)' == 'IKVM.Runtime.dll' " />
            <IkvmRuntimeJNIAssembly Include="@(Reference)" Condition=" '%(Filename)%(Extension)' == 'IKVM.Runtime.JNI.dll' " />
        </ItemGroup>

        <Error Text="Could not locate IKVM.Java.dll." Condition=" '@(IkvmBaseReference)' == '' " />
        <Error Text="Could not locate IKVM.Runtime.dll." Condition=" '@(IkvmRuntimeAssembly)' == '' " />
        <Error Text="Could not locate IKVM.Runtime.JNI.dll." Condition=" '@(IkvmRuntimeJNIAssembly)' == '' " />
    </Target>

    <!-- Transforms the IkvmReference item group into IkvmReferenceItem items. -->
    <Target Name="GetIkvmReferenceItemsFromIkvmReferences">
        <ItemGroup>
            <IkvmReferenceItem Include="@(IkvmReference)">

            </IkvmReferenceItem>
        </ItemGroup>
    </Target>

    <!-- Populates the IkvmReferenceItem set with required metadata. -->
    <Target Name="GetIkvmReferenceItemsMetadata" DependsOnTargets="GetIkvmReferenceItemsFromIkvmReferences;GetIkvmCompileReferences" Condition=" '@(IkvmReferenceItem)' != '' ">

        <!-- Populates metadata, validates, resolves references, and emits in build order. -->
        <IkvmReferenceItemPrepare Items="@(IkvmReferenceItem)" ToolVersion="$(IkvmVersion)" TargetFramework="$(IkvmTargetFramework)" RuntimeAssembly="@(IkvmRuntimeAssembly)" References="@(IkvmFrameworkReference);@(IkvmBaseReference);@(IkvmRuntimeAssembly);@(IkvmRuntimeJNIAssembly)" StageDir="$(IkvmStageDir)" CacheDir="$(IkvmCacheDir)">
            <Output TaskParameter="Items" ItemName="_IkvmReferenceItemWithMetadata" />
        </IkvmReferenceItemPrepare>

        <!-- Assign newly discovered items. -->
        <ItemGroup>
            <IkvmReferenceItem Remove="@(IkvmReferenceItem)"/>
            <IkvmReferenceItem Include="@(_IkvmReferenceItemWithMetadata)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetIkvmReferenceItemsDependsOn>
            $(GetIkvmReferenceItemsDependsOn);
            GetIkvmCompileReferences;
            GetIkvmReferenceItemsFromIkvmReferences;
            GetIkvmReferenceItemsMetadata;
        </GetIkvmReferenceItemsDependsOn>
    </PropertyGroup>

    <!-- Assembles the set of IkvmReferenceItems from various sources. -->
    <Target Name="GetIkvmReferenceItems" DependsOnTargets="$(GetIkvmReferenceItemsDependsOn)" Returns="@(IkvmReferenceItem)">

    </Target>

    <!-- Expands the IkvmReferenceItem set by the Compile metadata for inputs and outputs of the build target. -->
    <Target Name="_GetIkvmReferenceItemsCompileToCachePath" DependsOnTargets="GetIkvmReferenceItems" Condition=" '@(IkvmReferenceItem)' != '' ">
        <ItemGroup>
            <_IkvmReferenceItemCompileToCachePath Remove="@(_IkvmReferenceItemCompileToCachePath)" />
            <_IkvmReferenceItemCompileToCachePath Include="@(IkvmReferenceItem->'%(Compile)')" Condition=" '%(IkvmReferenceItem.Compile)' != '' ">
                <CachePath>%(IkvmReferenceItem.CachePath)</CachePath>
            </_IkvmReferenceItemCompileToCachePath>
        </ItemGroup>
    </Target>

    <!-- Builds the IkvmReferenceItem set into their output items within the cache. -->
    <Target Name="_CompileIkvmReferences" DependsOnTargets="GetIkvmCompileReferences;_GetIkvmReferenceItemsCompileToCachePath" Inputs="@(_IkvmReferenceItemCompileToCachePath)" Outputs="%(_IkvmReferenceItemCompileToCachePath.CachePath)" Condition=" '@(_IkvmReferenceItemCompileToCachePath.CachePath)' != '' ">

        <!-- Take IkvmReferenceItem for the current batch on CachePath. -->
        <PropertyGroup>
            <_IkvmReferenceItemToCompileCachePath>%(_IkvmReferenceItemCompileToCachePath.CachePath)</_IkvmReferenceItemToCompileCachePath>
        </PropertyGroup>
        <ItemGroup>
            <_IkvmReferenceItemToCompile Remove="@(_IkvmReferenceItemToCompile)" />
            <_IkvmReferenceItemToCompile Include="@(IkvmReferenceItem)" Condition=" '%(IkvmReferenceItem.CachePath)' == '$(_IkvmReferenceItemToCompileCachePath)' " />
            <_IkvmReferenceItemResolvedReference Remove="@(_IkvmReferenceItemResolvedReference)" />
            <_IkvmReferenceItemResolvedReference Include="%(_IkvmReferenceItemToCompile.ResolvedReferences)" />
        </ItemGroup>

        <!-- Output to stage path then copy to cache path to be atomic. -->
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(_IkvmReferenceItemToCompile.StagePath)'))" />
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(_IkvmReferenceItemToCompile.CachePath)'))" />

        <!-- Compile the reference item. -->
        <IkvmCompiler
            ToolsPath="$(IkvmToolsPath)ikvmc"
            TargetFramework="$(IkvmTargetFramework)"
            ResponseFile="%(_IkvmReferenceItemToCompile.StagePath).rsp"
            Output="%(_IkvmReferenceItemToCompile.StagePath)"
            Assembly="%(_IkvmReferenceItemToCompile.AssemblyName)"
            Version="%(_IkvmReferenceItemToCompile.AssemblyVersion)"
            FileVersion="%(_IkvmReferenceItemToCompile.AssemblyFileVersion)"
            Runtime="@(IkvmRuntimeAssembly)"
            Target="library"
            Debug="%(_IkvmReferenceItemToCompile.Debug)"
            KeyFile="%(_IkvmReferenceItemToCompile.KeyFile)"
            DelaySign="%(_IkvmReferenceItemToCompile.DelaySign)"
            CompressResources="true"
            ClassLoader="%(_IkvmReferenceItemToCompile.ClassLoader)"
            NoStdLib="true"
            References="@(IkvmFrameworkReference);@(IkvmBaseAssembly);@(IkvmRuntimeAssembly);@(IkvmRuntimeJNIAssembly);@(_IkvmReferenceItemResolvedReference->Distinct())"
            Input="%(_IkvmReferenceItemToCompile.Compile)"
            Condition=" '%(_IkvmReferenceItemToCompile.Compile)' != '' "/>
        <Copy
            SourceFiles="%(_IkvmReferenceItemToCompile.StagePath)"
            DestinationFiles="%(_IkvmReferenceItemToCompile.CachePath)"
            OverwriteReadOnlyFiles="true" />

        <ItemGroup>
            <FileWrites Include="%(_IkvmReferenceItemToCompile.StagePath)" />
            <FileWrites Include="%(_IkvmReferenceItemToCompile.StagePath).rsp" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CompileIkvmReferencesDependsOn>
            $(CompileIkvmReferenceAssemblies);
            GetIkvmReferenceItems;
            GetIkvmCompileReferences;
            _GetIkvmReferenceItemsCompileToCachePath;
            _CompileIkvmReferences;
        </CompileIkvmReferencesDependsOn>
    </PropertyGroup>

    <Target Name="CompileIkvmReferences" DependsOnTargets="$(CompileIkvmReferencesDependsOn)">

    </Target>

    <!-- Ensure the IkvmReference assemblies are built before compile. -->
    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <CompileDependsOn>
            CompileIkvmReferences;
            $(CompileDependsOn);
        </CompileDependsOn>
    </PropertyGroup>

    <!-- Adds the expected IkvmReferences to the Reference set. -->
    <Target Name="_ResolveIkvmReferences" DependsOnTargets="GetIkvmReferenceItems">
        <ItemGroup>
            <Reference Include="@(IkvmReferenceItem->'%(AssemblyName), Version=%(AssemblyVersion)')">
                <ReferenceSourceTarget>ResolveIkvmReferences</ReferenceSourceTarget>
                <HintPath>%(IkvmReferenceItem.CachePath)</HintPath>
                <Aliases>%(IkvmReferenceItem.Aliases)</Aliases>
                <Private>%(IkvmReferenceItem.Private)</Private>
                <ReferenceOutputAssembly>%(IkvmReferenceItem.ReferenceOutputAssembly)</ReferenceOutputAssembly>
            </Reference>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <ResolveIkvmReferencesDependsOn>
            $(ResolveIkvmReferencesDependsOn);
            CompileIkvmReferences;
            GetIkvmReferenceItems;
            _ResolveIkvmReferences;
        </ResolveIkvmReferencesDependsOn>
    </PropertyGroup>

    <Target Name="ResolveIkvmReferences" DependsOnTargets="$(ResolveIkvmReferencesDependsOn)">

    </Target>

    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <ResolveAssemblyReferencesDependsOn>
            ResolveIkvmReferences;
            $(ResolveAssemblyReferencesDependsOn);
        </ResolveAssemblyReferencesDependsOn>
    </PropertyGroup>

</Project>
